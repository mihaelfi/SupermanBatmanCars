import java.util.ArrayList;

import org.apache.log4j.Logger;



public class Warehouse implements WarehouseInterface{
        private final static Logger LOGGER = Logger.getLogger(Warehouse.class );


        protected ArrayList     <Ingredient>     fIngredientCollection ;
        protected ArrayList <KitchenTool>        fKitchenToolCollection ;



        /**
         * Empty Constructor , creates a new empty warehouse.
         */
        public Warehouse() {
                this.fIngredientCollection  = new ArrayList<Ingredient>();
                this.fKitchenToolCollection = new ArrayList<KitchenTool>();

        }

        /**
         * Constructor that creates a new warehouse and initiates it with a collection of ingredients
         * and a collection of kitchen tools.
         * @param ingredientCollection ,A collection of ingredients.
         * @param kitchenToolCollection ,A collection of kitchen tools.
         */

        public Warehouse(ArrayList<Ingredient> ingredientCollection,
                        ArrayList<KitchenTool> kitchenToolCollection) {
                this.fIngredientCollection = ingredientCollection;
                this.fKitchenToolCollection = kitchenToolCollection;
        }

        /**
         * A method that adds an Ingredient to the warehouse.
         * @param Ingredient , A object that simulates an Ingredient cluster
         */
        @Override
        public void addIngredient(Ingredient ingredientToAdd) {
                int searchIndex = -1;
                searchIndex = this.findWarehouseElement(ingredientToAdd);
                // if the ingredient is not in the warehouse, we add a new ingredient.
                if (searchIndex == -1){
                        this.fIngredientCollection.add(ingredientToAdd);
                        // if the ingredient is already in the warehouse , we only update it's quantity.
                }else{
                        this.fIngredientCollection.get(searchIndex).addIngredientQuantity(ingredientToAdd.getQuantity());
                }


        }


        /**
         * A method that adds an Kitchen Tools to the warehouse.
         * @param kitchentToolToAdd , A object that simulates a kitchentTool that is added to the cluster.
         */

        @Override
        public void addKitchenTool(KitchenTool kitchentToolToAdd) {
                int searchIndex = -1;
                searchIndex = this.findWarehouseElement(kitchentToolToAdd);
                // if the ingredient is not in the warehouse, we add a new ingredient.
                if (searchIndex == -1){
                        this.fKitchenToolCollection.add(kitchentToolToAdd);
                        // if the ingredient is already in the warehouse , we only update it's quantity.
                }else{
                        this.fKitchenToolCollection.get(searchIndex).addKitchenToolQuantity(kitchentToolToAdd.getQuantity());
                }

        }


        /**
         * A method that finds an element (Ingredient or Kitchen Tool) in the warehouse.
         * @param warehouseElement , either Ingredient or Kitchen Tool object.
         * @return The index of the searched element , in case the element is not found returns -1
         */

        protected int findWarehouseElement(Object warehouseElement) {
                int p=-1,i;
                boolean found=false;

                if (this.fIngredientCollection == null || this.fKitchenToolCollection == null){
                        LOGGER.error("Ingredient or Kitchent Tools Vector is null !! - Big problem ! ");
                }

                if (warehouseElement instanceof Ingredient) {
                        ArrayList <Ingredient> tmp = this.fIngredientCollection;
                        for (i=0; i<tmp.size() && !found; i++){
                                String searchedIngredient = ((Ingredient)warehouseElement).getName();
                                String inspectedIngredient = tmp.get(i).getName();
                                if (searchedIngredient.equals(inspectedIngredient)){
                                        found=true;
                                        p=i;
                                }
                        }
                }else{
                        ArrayList <KitchenTool> tmp = this.fKitchenToolCollection;
                        for (i=0; i<tmp.size() && !found; i++){
                                String searchedKitchenTool = ((KitchenTool)warehouseElement).getName();
                                String inspectedKitchenTool = tmp.get(i).getName();
                                if (searchedKitchenTool.equals(inspectedKitchenTool)){
                                        found=true;
                                        p=i;
                                }
                        }
                }
                return p;

        }

        public ArrayList<Ingredient> getIngredientCollection(){
                return this.fIngredientCollection;
        }




        public int numberOfKitchenToolsAtIndex (int index){

                return this.fKitchenToolCollection.get(index).getQuantity();

        }
        /**
         * Prints an ingredient status in a specific index
         * @param index , The index in which the Ingredient resides.
         * @return A string with the name,quantity, and number of times used of the ingredient.
         */
        public String printIngredinetAtIndex (int index){
                String output;
                if (index < this.fIngredientCollection.size()){
                        output = this.fIngredientCollection.get(index).toString();
                }else{
                        output = "Warehouse: Error In Index number while trying to print ingredient in specific index";
                }
                return output;
        }

        public String printKitchenToolAtIndex (int index){
                String output;
                if (index < this.fKitchenToolCollection.size()){
                        output = this.fKitchenToolCollection.get(index).toString();
                }else{
                        output = "Warehouse: Error In Index number while trying to print ingredient in specific index";
                }
                return output;
        }


        /**
         * A method that simulates the use of an Ingredient.
         * @param ingredient , The ingredient cluster to be used.
         * 
         */
        public void takeIngredient(Ingredient ingredient) {
                String name = ingredient.getName();
                int numberOfIngredientsToUse = ingredient.getQuantity();
                this.takeIngredient(name, numberOfIngredientsToUse);
        }
        /**
         * A method that simulates the use of an Ingredient, given the name of the ingredient to be used and it's quantity.
         * @param name , the name of Ingredient (String)
         * @param numberOfIngredientsToUse ,number of ingredients we want to use.
         * 
         */
        @Override
        public void takeIngredient(String name, int numberOfIngredientsToUse) {
                boolean found = false;
                for (int i = 0 ; i < this.fIngredientCollection.size() && !found ; i++){
                        String nameOfInspectedIngredient = this.fIngredientCollection.get(i).getName();
                        if ( nameOfInspectedIngredient.equals(name)){
                                found = true;
                                //if the number of ingredients is less then the number of ingredients that we want to use
                                // we will get the following error.
                                if (!this.takeIngredientInIndex(i, numberOfIngredientsToUse)){
                                        System.out.println("Warehouse: Not enough ingrideients");
                                }
                        }
                }
                if (!found){
                        LOGGER.error("The ingredient "+" *"+name  +"* "+"was not found in the warehouse - BAGA!" );
                        System.out.println("Warehouse: No such ingredient in the warehouse");
                }


        }

        /**
         * A method that simulates the use of an Ingredient at a specific index in the warehouse.
         * @param index , The index in the ingredientCollection vector where the desired ingredient is located.
         * @param numberOfIngredientsToUse , The number of ingredients we want to use.
         * @return true, if the use was successful , false otherwise.
         */

        protected boolean takeIngredientInIndex (int index , int numberOfIngredientsToUse){
                boolean isUseSucessful = true;
                int currentQuantityOfIngredient = this.fIngredientCollection.get(index).getQuantity();
                int currentNumberOfTimesUsed = this.fIngredientCollection.get(index).getNumberOfTimesUsed();
                if (currentQuantityOfIngredient >= numberOfIngredientsToUse){
                        this.fIngredientCollection.get(index).setQuantity(currentQuantityOfIngredient - numberOfIngredientsToUse);
                        this.fIngredientCollection.get(index).setNumberOfTimesUsed(currentNumberOfTimesUsed + numberOfIngredientsToUse);
                }else{
                        isUseSucessful = false;
                }

                return isUseSucessful;
        }

        @Override
        public String toString(){
                final String newline = System.getProperty("line.separator");
                String ans = "Kitchen Tools in warehouse: " + newline;

                for (int i = 0 ; i < this.fKitchenToolCollection.size(); i ++){
                        ans = ans + this.fKitchenToolCollection.get(i).toString() + newline;
                }

                ans = ans + "Ingredients In warehouse :" + newline;

                for (int i = 0 ; i < this.fIngredientCollection.size(); i ++){
                        ans = ans + this.fIngredientCollection.get(i).toString() + newline;
                }


                return ans;
        }


        @Override
        public boolean useKitchenTool(KitchenTool toolToUse) {
                boolean ans = false;
                int indexOfKitchenToolToUse = -1;
                indexOfKitchenToolToUse = this.findWarehouseElement(toolToUse);
                if (this.fKitchenToolCollection.get(indexOfKitchenToolToUse).useKitchenTool(toolToUse)){
                        ans = true;
                }

                return ans;

        }






}