mihaelfi@gmail.com ▼ | My favorites ▼ | Profile | Sign out
 Logo	
strong-faith
makes you strong
  
Project HomeWikiIssuesSourceAdminister
Checkout   Browse   Changes   Request code review
Source path:  svn/  trunk/  strong-faith/ Assingment3/ test/ WarehouseTest.java	Edit file	
‹r95
r144
 	1
 	2
 	3
 	4
 	5
 	6
 	7
 	8
 	9
 	10
 	11
 	12
 	13
 	14
 	15
 	16
 	17
 	18
 	19
 	20
 	21
 	22
 	23
 	24
 	25
 	26
 	27
 	28
 	29
 	30
 	31
 	32
 	33
 	34
 	35
 	36
 	37
 	38
 	39
 	40
 	41
 	42
 	43
 	44
 	45
 	46
 	47
 	48
 	49
 	50
 	51
 	52
 	53
 	54
 	55
 	56
 	57
 	58
 	59
 	60
 	61
 	62
 	63
 	64
 	65
 	66
 	67
 	68
 	69
 	70
 	71
 	72
 	73
 	74
 	75
 	76
 	77
 	78
 	79
 	80
 	81
 	82
 	83
 	84
 	85
 	86
 	87
 	88
 	89
 	90
 	91
 	92
 	93
 	94
 	95
 	96
 	97
 	98
 	99
 	100
 	101
 	102
 	103
 	104
 	105
 	106
 	107
 	108
 	109
 	110
 	111
 	112
 	113
 	114
 	115
 	116
 	117
 	118
 	119
 	120
 	121
 	122
 	123
 	124
 	125
 	126
 	127
 	128
 	129
 	130
 	131
 	132
 	133
 	134
 	135
 	136
 	137
 	138
 	139
 	140
 	141
 	142
 	143
 	144
 	145
 	146
 	147
 	148
 	149
 	150
 	151
 	152
 	153
 	154
 	155
 	156
 	157
 	158
 	159
 	160
 	161
 	162
 	163
 	164
 	165
 	166
 	167
 	168
 	169
 	170
 	171
 	172
 	173
 	174
 	175
 	176
 	177
 	178
 	179
 	180
 	181
 	182
 	183
 	184
 	185

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;


/**
 * @author Mike Fildstein Id:309161594 , Tova Mor Rot Id: 203535067
 *
 */



public class WarehouseTest {
        //The tested class used here is a class that extends the original Warehouse class.
        warehouseForTest warehouseTested;
        final String INGREDIENT1_NAME           =       "Banana";
        final String INGREDIENT2_NAME           =       "Apple";
        final String KITCHEN_TOOL_1_NAME        =       "Knife";
        final String KITCHEN_TOOL_2_NAME        =       "Pot";


        private void clearWarehouse (){
                this.warehouseTested.getIngredientCollection().clear();
                this.warehouseTested.getKitchenToolCollection().clear();
        }


        @Before
        public void setUp() throws Exception {
                this.warehouseTested = new warehouseForTest();

        }

        @After
        public void tearDown() throws Exception {
        }

        @Test
        public void test() {

                this.testFindWarehouseElement();
                this.testAddIngredient();
                this.testAddKitchenTool();
                this.testTakeIngredient();
                this.testUseKitchenTool();

        }



        public void testAddIngredient()
        {
                this.clearWarehouse();
                int index;
                Ingredient testIngredient = new Ingredient (this.INGREDIENT1_NAME , 3);
                Ingredient testIngredient2 = new Ingredient (this.INGREDIENT1_NAME ,7);
                Ingredient testIngredient3 = new Ingredient (this.INGREDIENT2_NAME ,5);

                //Checking if we actually added and ingredient.
                this.warehouseTested.addIngredient(testIngredient);
                index = this.warehouseTested.findWarehouseElement(testIngredient);
                assertEquals(testIngredient, this.warehouseTested.getIngredientCollection().get(index));

                // Checking if quantity of an added ingredient was updated.
                this.warehouseTested.addIngredient(testIngredient2);
                index = this.warehouseTested.findWarehouseElement(testIngredient);
                assertEquals(10,  this.warehouseTested.getIngredientCollection().get(index).getQuantity());

                //Checking if adding another ingredient works
                this.warehouseTested.addIngredient(testIngredient3);
                assertEquals(2, this.warehouseTested.getIngredientCollection().size());

        }



        public void testAddKitchenTool()
        {
                this.clearWarehouse();
                this.warehouseTested.getKitchenToolCollection().clear();
                int index;
                KitchenTool testKitchenTool = new KitchenTool (this.INGREDIENT1_NAME , 3);
                KitchenTool testKitchenTool2 = new KitchenTool (this.INGREDIENT1_NAME ,7);
                KitchenTool testKitchenTool3 = new KitchenTool (this.INGREDIENT2_NAME ,5);

                // Checking if a kitchen tool was actually added
                this.warehouseTested.addKitchenTool(testKitchenTool);
                index = this.warehouseTested.findWarehouseElement(testKitchenTool);
                assertEquals(testKitchenTool, this.warehouseTested.getKitchenToolCollection().get(index));

                // Checking if the function updates the number of Kitchen tools.
                this.warehouseTested.addKitchenTool(testKitchenTool2);
                index = this.warehouseTested.findWarehouseElement(testKitchenTool2);
                assertEquals(10, this.warehouseTested.getKitchenToolCollection().get(index).getQuantity());

                // Checking if adding different tools works properly
                this.warehouseTested.addKitchenTool(testKitchenTool3);
                assertEquals(2, this.warehouseTested.getKitchenToolCollection().size());

        }




        public void testFindWarehouseElement()
        {
                this.clearWarehouse();
                int index;
                Ingredient testIngredient = new Ingredient (this.INGREDIENT1_NAME , 3);
                Ingredient testIngredient2 = new Ingredient (this.INGREDIENT2_NAME , 3);

                // checking that 'FindWarehouseElement()'doesn't give false positives
                //(making sure it doesn't find elements that were not inserted)
                assertEquals(true , this.warehouseTested.findWarehouseElement(testIngredient) == -1);


                this.warehouseTested.addIngredient(testIngredient);
                this.warehouseTested.addIngredient(testIngredient2);
                index= this.warehouseTested.findWarehouseElement(testIngredient);

                //checking if the Ingredients we just added found on the correct index.
                //If the searched element is not found in the vector, the function returns -1
                assertEquals(true , this.warehouseTested.findWarehouseElement(testIngredient) != -1);
                assertEquals(testIngredient , this.warehouseTested.getIngredientCollection().get(index));


                KitchenTool testKitchenTool = new KitchenTool (this.KITCHEN_TOOL_1_NAME , 3);
                KitchenTool testKitchenTool2 = new KitchenTool (this.KITCHEN_TOOL_2_NAME , 3);

                // checking that 'FindWarehouseElement()'doesn't give false positives
                //(making sure it doesn't find elements that were not inserted)
                assertEquals(true , this.warehouseTested.findWarehouseElement(testKitchenTool) == -1);

                this.warehouseTested.addKitchenTool(testKitchenTool);
                this.warehouseTested.addKitchenTool(testKitchenTool2);
                index= this.warehouseTested.findWarehouseElement(testKitchenTool);

                //checking if the Kitchen Tools we just added found on the correct index.
                //If the searched element is not found in the vector, the function returns -1.
                assertEquals(true , this.warehouseTested.findWarehouseElement(testKitchenTool) != -1);
                assertEquals(testKitchenTool,this.warehouseTested.getKitchenToolCollection().get(index));
        }


        public void testTakeIngredient()
        {
                this.clearWarehouse();
                int index;
                Ingredient testIngredient = new Ingredient (this.INGREDIENT1_NAME , 5);


                this.warehouseTested.addIngredient(testIngredient);
                this.warehouseTested.takeIngredient(this.INGREDIENT1_NAME, 3);
                index = this.warehouseTested.findWarehouseElement(testIngredient);

                // checking if the function correctly updates the quantity of the ingredients the were left after use.
                // also checking that the function updates the number of time a particular ingredient was used.
                assertEquals(2, this.warehouseTested.getIngredientCollection().get(index).getQuantity());
                assertEquals(3, this.warehouseTested.getIngredientCollection().get(index).getNumberOfTimesUsed());
        }


        public void testUseKitchenTool()
        {
                this.clearWarehouse();
                int index;
                KitchenTool testKitchenTool = new KitchenTool (this.KITCHEN_TOOL_1_NAME , 3);
                KitchenTool testKitchenTool2 = new KitchenTool (this.KITCHEN_TOOL_1_NAME , 3);
                this.warehouseTested.addKitchenTool(testKitchenTool);
                boolean useSuccesful=this.warehouseTested.useKitchenTool(testKitchenTool2);
                index = this.warehouseTested.findWarehouseElement(testKitchenTool2);

                //checking if the function updates the quantity correct , also checks if use was successful (quantity is not negative.)
                assertEquals(0, this.warehouseTested.getKitchenToolCollection().get(index).getQuantity());
                assertEquals(true,useSuccesful);

                // checks that the function returns 'false' when there are no knives (Impossible to use)
                boolean use2 = this.warehouseTested.useKitchenTool(testKitchenTool2);
                assertEquals(false,use2);
        }

}
